{
  "project_overview": {
    "name": "DABOTMAN - Database-Centric AI Orchestration Platform",
    "description": "A revolutionary system where PostgreSQL IS the application. All configuration, state, and logic lives in database tables. Tools are registered in a central registry and made available to all AI models through a unified gateway.",
    "key_innovation": "Everything flows through LiteLLM as the central gateway, providing unified access to all tools for all AI models."
  },
  
  "architecture_diagram": {
    "ascii_art": [
      "                 All AI Models (Claude, GPT, Gemini, etc.)",
      "                                    â†“",
      "                            LiteLLM Gateway",
      "                           /       |       \\",
      "                      ADK       MCP      Direct",
      "                    Provider  Provider    Tools",
      "                       |         |          |",
      "                   Google      Tool     Database",
      "                    APIs     Protocol     Tools"
    ],
    "explanation": "LiteLLM serves as the single gateway that routes all AI model requests to appropriate providers and tools"
  },
  
  "your_mission": {
    "summary": "Build a complete AI orchestration platform with 50+ tools, all accessible through a unified LiteLLM gateway",
    "phases": [
      {
        "phase": 1,
        "name": "Research",
        "description": "Study how to integrate ADK and MCP as LiteLLM providers",
        "deliverable": "research/LITELLM_INTEGRATION_PLAN.md"
      },
      {
        "phase": 2,
        "name": "Parallel Build",
        "description": "Build all components simultaneously with LiteLLM at the center",
        "components": [
          "Core Pipeline (5 analysis tools)",
          "REST, GraphQL, WebSocket APIs",
          "LiteLLM Gateway with ADK and MCP providers",
          "Monitoring and real-time dashboards",
          "CLI tools for all operations",
          "Supabase Edge Functions",
          "Complete test suite"
        ]
      }
    ]
  },
  
  "technical_details": {
    "database": {
      "description": "PostgreSQL with command queue pattern",
      "schema_file": "database-simulator.sql",
      "key_tables": ["tool_registry", "command_queue", "execution_logs", "model_registry"]
    },
    "tools_to_build": {
      "count": "50+",
      "categories": ["database", "analysis", "ml", "monitoring", "security", "workflow"],
      "registration": "All tools register in tool_registry table"
    },
    "integration_flow": {
      "mcp_to_litellm": "MCP server exposes tools to LiteLLM",
      "adk_to_litellm": "ADK provider gives LiteLLM access to Google AI",
      "litellm_to_models": "All AI models access everything through LiteLLM"
    }
  },
  
  "quick_start": {
    "step_1": "Install dependencies from sandbox-install-commands.txt",
    "step_2": "Create virtual environment if needed",
    "step_3": "Read all specification files",
    "step_4": "Research optimal LiteLLM integration approach",
    "step_5": "Build everything in parallel",
    "step_6": "Create startup.py for one-command launch"
  },
  
  "files_to_read": [
    {
      "file": "database-simulator.sql",
      "purpose": "Database schema - source of truth for all operations"
    },
    {
      "file": "codex-database-analysis-setup.json",
      "purpose": "Core pipeline tool specifications"
    },
    {
      "file": "additional-codex-tasks.json",
      "purpose": "Extended features and components"
    },
    {
      "file": "adk-integration-tasks.json",
      "purpose": "ADK and MCP integration details"
    },
    {
      "file": "integration-setup-tasks.json",
      "purpose": "Tool loading and configuration automation"
    }
  ],
  
  "success_criteria": {
    "tools_registered": "SELECT COUNT(*) FROM tool_registry; -- Should be 50+",
    "apis_working": "All REST, GraphQL, WebSocket endpoints return 200 OK",
    "litellm_routing": "All AI models can access all tools through LiteLLM",
    "one_command_startup": "python startup.py launches entire system",
    "monitoring_active": "Dashboard shows real-time metrics for all components"
  },
  
  "execution_strategy": {
    "parallelization": "Execute up to 50 tasks simultaneously",
    "research_first": "Understand optimal architecture before building",
    "litellm_centric": "Everything routes through LiteLLM gateway",
    "test_everything": "90%+ test coverage for all components",
    "document_all": "Auto-generate documentation for everything"
  },
  
  "final_command": "Read this START_HERE.json file first to understand the project. Then research LiteLLM integration patterns. Finally, build everything in parallel with LiteLLM as the central gateway for all AI models to access all tools."
}